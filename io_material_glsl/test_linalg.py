#### __mul__() and inverted() are generated by the following Wolfram Mathematica fragment: ###
#
# toPython[x_] := StringReplace[ToString[x // InputForm], {"{" -> "[",
#                                                          "}" -> "]"}]
#
# m1 = Table[a[i][j], {i,0,3}, {j,0,3}]
# m2 = m1 //. a -> b
#
# toPython@Dot[m1,m2]
# toPython@Inverse[m1]

class Matrix(object):
    def __init__(self,rows):
        self.rows = rows

    def __mul__(ma,mb):
        a = ma.rows
        b = mb.rows
        return Matrix([[a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0], a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1] + a[0][3]*b[3][1], a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] + a[0][3]*b[3][2], a[0][0]*b[0][3] + a[0][1]*b[1][3] + a[0][2]*b[2][3] + a[0][3]*b[3][3]], [a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0], a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1] + a[1][3]*b[3][1], a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] + a[1][3]*b[3][2], a[1][0]*b[0][3] + a[1][1]*b[1][3] + a[1][2]*b[2][3] + a[1][3]*b[3][3]], [a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0], a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1] + a[2][3]*b[3][1], a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] + a[2][3]*b[3][2], a[2][0]*b[0][3] + a[2][1]*b[1][3] + a[2][2]*b[2][3] + a[2][3]*b[3][3]], [a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0], a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1] + a[3][3]*b[3][1], a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2] + a[3][3]*b[3][2], a[3][0]*b[0][3] + a[3][1]*b[1][3] + a[3][2]*b[2][3] + a[3][3]*b[3][3]]])
        
    def inverted(self):
        a = self.rows
        return Matrix([[(a[1][3]*(a[2][2]*a[3][1] - a[2][1]*a[3][2]) + a[1][2]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]) + a[1][1]*(a[2][3]*a[3][2] - a[2][2]*a[3][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][3]*(a[2][2]*a[3][1] - a[2][1]*a[3][2]) + a[0][2]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]) + a[0][1]*(a[2][3]*a[3][2] - a[2][2]*a[3][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][3]*(a[1][2]*a[3][1] - a[1][1]*a[3][2]) + a[0][2]*(-(a[1][3]*a[3][1]) + a[1][1]*a[3][3]) + a[0][1]*(a[1][3]*a[3][2] - a[1][2]*a[3][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][3]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]) + a[0][2]*(-(a[1][3]*a[2][1]) + a[1][1]*a[2][3]) + a[0][1]*(a[1][3]*a[2][2] - a[1][2]*a[2][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3])))], [(a[1][3]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][2]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][2] - a[2][2]*a[3][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][3]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[0][2]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[0][0]*(a[2][3]*a[3][2] - a[2][2]*a[3][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][3]*(a[1][2]*a[3][0] - a[1][0]*a[3][2]) + a[0][2]*(-(a[1][3]*a[3][0]) + a[1][0]*a[3][3]) + a[0][0]*(a[1][3]*a[3][2] - a[1][2]*a[3][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][3]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][2]*(-(a[1][3]*a[2][0]) + a[1][0]*a[2][3]) + a[0][0]*(a[1][3]*a[2][2] - a[1][2]*a[2][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3])))], [(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[0][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[0][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][3]*(a[1][1]*a[3][0] - a[1][0]*a[3][1]) + a[0][1]*(-(a[1][3]*a[3][0]) + a[1][0]*a[3][3]) + a[0][0]*(a[1][3]*a[3][1] - a[1][1]*a[3][3]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][3]*(a[1][1]*a[2][0] - a[1][0]*a[2][1]) + a[0][1]*(-(a[1][3]*a[2][0]) + a[1][0]*a[2][3]) + a[0][0]*(a[1][3]*a[2][1] - a[1][1]*a[2][3]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3])))], [(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[0][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[0][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3]))), (a[0][2]*(a[1][1]*a[3][0] - a[1][0]*a[3][1]) + a[0][1]*(-(a[1][2]*a[3][0]) + a[1][0]*a[3][2]) + a[0][0]*(a[1][2]*a[3][1] - a[1][1]*a[3][2]))/(a[0][1]*a[1][3]*a[2][2]*a[3][0] - a[0][1]*a[1][2]*a[2][3]*a[3][0] - a[0][0]*a[1][3]*a[2][2]*a[3][1] + a[0][0]*a[1][2]*a[2][3]*a[3][1] - a[0][1]*a[1][3]*a[2][0]*a[3][2] + a[0][0]*a[1][3]*a[2][1]*a[3][2] + a[0][1]*a[1][0]*a[2][3]*a[3][2] - a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][2]*a[3][0]) + a[2][0]*a[3][2]) + a[1][0]*(a[2][2]*a[3][1] - a[2][1]*a[3][2])) + (a[0][1]*(a[1][2]*a[2][0] - a[1][0]*a[2][2]) + a[0][0]*(-(a[1][2]*a[2][1]) + a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][3]*a[3][0] - a[2][0]*a[3][3]) + a[1][0]*(-(a[2][3]*a[3][1]) + a[2][1]*a[3][3]))), (a[0][2]*(a[1][1]*a[2][0] - a[1][0]*a[2][1]) + a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))/(-(a[0][1]*a[1][3]*a[2][2]*a[3][0]) + a[0][1]*a[1][2]*a[2][3]*a[3][0] + a[0][0]*a[1][3]*a[2][2]*a[3][1] - a[0][0]*a[1][2]*a[2][3]*a[3][1] + a[0][1]*a[1][3]*a[2][0]*a[3][2] - a[0][0]*a[1][3]*a[2][1]*a[3][2] - a[0][1]*a[1][0]*a[2][3]*a[3][2] + a[0][0]*a[1][1]*a[2][3]*a[3][2] + a[0][3]*(a[1][2]*(-(a[2][1]*a[3][0]) + a[2][0]*a[3][1]) + a[1][1]*(a[2][2]*a[3][0] - a[2][0]*a[3][2]) + a[1][0]*(-(a[2][2]*a[3][1]) + a[2][1]*a[3][2])) + (a[0][1]*(-(a[1][2]*a[2][0]) + a[1][0]*a[2][2]) + a[0][0]*(a[1][2]*a[2][1] - a[1][1]*a[2][2]))*a[3][3] + a[0][2]*(a[1][3]*(a[2][1]*a[3][0] - a[2][0]*a[3][1]) + a[1][1]*(-(a[2][3]*a[3][0]) + a[2][0]*a[3][3]) + a[1][0]*(a[2][3]*a[3][1] - a[2][1]*a[3][3])))]])


if __name__ == '__main__':
    from fractions import Fraction
    f = Fraction
    
    x = Matrix([[f(1), f(2), f(3), f(4)],
                [f(5), f(6), f(7), f(8)],
                [f(9), f(1), f(2), f(3)],
                [f(4), f(5), f(0), f(7)]])

    x_inv = Matrix([[f(-5, 36),  f(1, 36),    f(1, 9),  f(0)],
                    [f(-13, 16), f(19, 48),   f(-1, 6), f(1, 12)],
                    [f(1, 24),   f(1, 8),     f(0),     f(-1, 6)],
                    [f(95, 144), f(-43, 144), f(1, 18), f(1, 12)]])

    print("> __mul__: check: \n> \t%r\n" % (x*x).rows)
    assert (x * x).rows == [[54, 37, 23, 57],
                            [130, 93, 71, 145],
                            [44, 41, 38, 71],
                            [57, 73, 47, 105]]

    print("> inverted: check: \n> \t%r\n" % x.inverted().rows)
    assert x.inverted().rows == x_inv.rows    


    idtest = (x.inverted() * x).rows
    print("> (x^-1) * x == id: check. \n> \t%r\n" % idtest)
    assert idtest == [[1,0,0,0],
                      [0,1,0,0],
                      [0,0,1,0],
                      [0,0,0,1]]
